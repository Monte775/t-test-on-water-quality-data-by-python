# -*- coding: utf-8 -*-
"""t-test

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1glXTs4Sg9o_gFHQYkDAYraQE3XrU2NXs
"""

# -*- coding: utf-8 -*-
# Paired t-test to assess differences in water quality data after certain event
import datetime
import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import openpyxl
import scipy.stats
from scipy.stats import shapiro

plt.rc('font', family='NanumGothic')

os.chdir(r'/content/drive/MyDrive/R 교육용 자료')

df = pd.read_excel('Sample data.xlsx')

df_open = df[df.Weir == 1] # after event
df_close = df[df.Weir == 0] # before event

df_open.dropna(inplace = True)
df_close.dropna(inplace = True)

result = pd.DataFrame({'colname':[],
                  'close':[],
                  'open':[],
                  't':[],
                  'p-value':[],
                  'significance':[]
                   })

result

col_names = df_open.columns[2:]

for i in col_names:
  t = scipy.stats.ttest_ind(df_open[i],df_close[i], equal_var=False)[0]
  p = scipy.stats.ttest_ind(df_open[i],df_close[i], equal_var=False)[1]
  print(i)
  print(str(round(df_close[i].mean(),2))+'±'+str(round(df_close[i].std(),2)))
  print(str(round(df_open[i].mean(),2))+'±'+str(round(df_open[i].std(),2)))
  print('t='+str(round(t,2))+';p='+str(round(p,4)))
  print('-------------------------------------------------------------------')
  if 0.01<=p<0.05:
    sig = '*'
  elif 0.001<=p<0.01:
    sig = '**'
  elif p<0.001:
    sig = '***'
  else:
    sig = 'Not significant'
  result = result.append(pd.DataFrame([[i, # colname
                                        str(round(df_close[i].mean(),2))+'±'+str(round(df_close[i].std(),2)), # before mean ± std
                                        str(round(df_open[i].mean(),2))+'±'+str(round(df_open[i].std(),2)), # after mean ± std
                                        str(round(t,2)),
                                        str(round(p,4)),
                                        sig]], columns = ['colname','close','open','t','p-value','significance']))

result.to_csv('ttest_result.csv',encoding = 'cp949')

